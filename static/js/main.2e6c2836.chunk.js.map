{"version":3,"sources":["Components/MenuItem.jsx","constants/index.js","Components/MenuOption.jsx","Components/MenuEmpty.jsx","Components/Menu.jsx","hooks/useOptions.js","hooks/useStateManager.js","helpers/index.js","hooks/useFilter.js","hooks/useAsync.js","Components/Autocomplete.jsx","Components/AutocompleteAsync.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["MenuItem","props","minHeight","display","alignItems","px","py","as","MenuOption","label","onPick","rest","cursor","_hover","background","onClick","MenuEmpty","message","fontStyle","defaultProps","Menu","forwardRef","ref","options","open","onPickOption","emptyMessage","size","menuMaxHeight","useMemo","position","top","marginY","width","boxSizing","borderRadius","boxShadow","listStyleType","zIndex","overflow","maxHeight","length","map","option","value","useOptions","getLabel","getValue","op","useStateManager","defaultInputValue","defaultMenuIsOpen","defaultValue","propsInputValue","inputValue","propsMenuIsOpen","menuIsOpen","propsOnChange","onChange","propsOnInputChange","onInputChange","propsOnMenuClose","onMenuClose","propsOnMenuOpen","onMenuOpen","propsValue","useState","undefined","stateInputValue","setStateInputValue","stateMenuIsOpen","setStateMenuIsOpen","stateValue","setStateValue","useCallback","actionMeta","newValue","onClear","propTypes","getOptionByValue","find","clearAccent","str","normalize","replace","useFilter","filterText","filterOptions","normalizedFilterText","caseSensitive","toLowerCase","accentSensitive","filter","normalizedLabel","includes","PropTypes","arrayOf","shape","any","string","bool","useAsync","triggerService","service","Autocomplete","getOptionLabel","getOptionValue","propsOptions","externalValue","menuSize","debugMode","allOptions","state","containerRef","useRef","menuRef","useClickOutside","currentOption","console","log","group","event","target","flex","placeholder","Close","w","h","ChevronDown","ml","AsyncAutocomplete","mockedOptions","App","controledValue","setControledValue","filterOption","setFilterOptions","getOptions","textFilter","a","fetch","flexDirection","height","bgGradient","marginBottom","fontWeight","fontSize","tex","color","margin","padding","my","isChecked","e","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e6c2836.chunk.js","sourcesContent":["import { Box } from '@chakra-ui/react';\nimport { DEFAULT_MENU_ITEM_HEIGHT } from '../constants';\n\nconst MenuItem = props => (\n  <Box\n    minHeight={`${DEFAULT_MENU_ITEM_HEIGHT}px`}\n    display=\"flex\"\n    alignItems=\"center\"\n    px=\"10px\"\n    py=\"5px\"\n    as=\"li\"\n    {...props}\n  />\n);\n\nexport default MenuItem;\n","export const DEFAULT_MENU_ITEM_HEIGHT = 40;\n","import PropTypes from 'prop-types';\nimport MenuItem from './MenuItem';\n\nconst MenuOption = ({ label, onPick, ...rest }) => (\n  <MenuItem\n    cursor=\"pointer\"\n    _hover={{\n      background: 'red.200',\n    }}\n    onClick={onPick}\n    {...rest}\n  >\n    {label}\n  </MenuItem>\n);\n\nMenuOption.propTypes = {\n  label: PropTypes.string.isRequired,\n  onPick: PropTypes.func.isRequired,\n};\n\nexport default MenuOption;\n","import PropTypes from 'prop-types';\nimport MenuItem from './MenuItem';\n\nconst MenuEmpty = ({ message }) => (\n  <MenuItem fontStyle=\"italic\">{message}</MenuItem>\n);\n\nMenuEmpty.propTypes = {\n  message: PropTypes.string,\n};\n\nMenuEmpty.defaultProps = {\n  message: 'No options',\n};\n\nexport default MenuEmpty;\n","import { forwardRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Box } from '@chakra-ui/react';\nimport MenuOption from './MenuOption';\nimport MenuEmpty from './MenuEmpty';\n\nimport { DEFAULT_MENU_ITEM_HEIGHT } from '../constants';\n\nconst Menu = forwardRef(\n  ({ options, open, onPickOption, emptyMessage, size }, ref) => {\n    const menuMaxHeight = useMemo(() => {\n      return size * DEFAULT_MENU_ITEM_HEIGHT;\n    }, [size]);\n\n    if (!open) return null;\n\n    return (\n      <Box\n        ref={ref}\n        position=\"absolute\"\n        top=\"100%\"\n        marginY=\"4px\"\n        width=\"100%\"\n        boxSizing=\"border-box\"\n        borderRadius={4}\n        boxShadow=\"0 0 0 1px hsl(0deg 0% 0% / 10%), 0 4px 11px hsl(0deg 0% 0% / 10%)\"\n        background=\"blue.200\"\n        as=\"ul\"\n        listStyleType=\"none\"\n        zIndex=\"3\"\n        overflow=\"auto\"\n        maxHeight={menuMaxHeight}\n      >\n        {!options.length ? (\n          <MenuEmpty message={emptyMessage} />\n        ) : (\n          options.map(option => (\n            <MenuOption\n              key={option.value}\n              onPick={() => onPickOption(option)}\n              label={option.label}\n            />\n          ))\n        )}\n      </Box>\n    );\n  },\n);\n\nMenu.propTypes = {\n  options: PropTypes.array.isRequired,\n  open: PropTypes.bool.isRequired,\n  onPickOption: PropTypes.func.isRequired,\n  emptyMessage: PropTypes.string,\n  size: PropTypes.number,\n};\n\nexport default Menu;\n","const useOptions = (options = [], getLabel, getValue) =>\n  options.map(op => ({ value: getValue(op), label: getLabel(op) }));\n\nexport default useOptions;\n","import { useState, useCallback } from 'react';\n\nconst useStateManager = ({\n  defaultInputValue = '',\n  defaultMenuIsOpen = false,\n  defaultValue = null,\n  inputValue: propsInputValue,\n  menuIsOpen: propsMenuIsOpen,\n  onChange: propsOnChange,\n  onInputChange: propsOnInputChange,\n  onMenuClose: propsOnMenuClose,\n  onMenuOpen: propsOnMenuOpen,\n  value: propsValue,\n}) => {\n  const [stateInputValue, setStateInputValue] = useState(\n    propsInputValue !== undefined ? propsInputValue : defaultInputValue,\n  );\n  const [stateMenuIsOpen, setStateMenuIsOpen] = useState(\n    propsMenuIsOpen !== undefined ? propsMenuIsOpen : defaultMenuIsOpen,\n  );\n  const [stateValue, setStateValue] = useState(\n    propsValue !== undefined ? propsValue : defaultValue,\n  );\n\n  const onChange = useCallback(\n    (option, actionMeta) => {\n      if (typeof propsOnChange === 'function') {\n        propsOnChange(option.value, actionMeta);\n      }\n\n      setStateInputValue(option.label);\n      setStateValue(option.value);\n    },\n    [propsOnChange],\n  );\n\n  const onInputChange = useCallback(\n    (value, actionMeta) => {\n      let newValue;\n      if (typeof propsOnInputChange === 'function') {\n        newValue = propsOnInputChange(value, actionMeta);\n      }\n      setStateInputValue(newValue !== undefined ? newValue : value);\n    },\n    [propsOnInputChange],\n  );\n\n  const onClear = useCallback(() => {\n    if (typeof propsOnChange === 'function') {\n      propsOnChange(null, 'clear-value');\n    }\n\n    setStateInputValue('');\n    setStateValue(null);\n  }, [propsOnChange]);\n\n  const onMenuOpen = useCallback(() => {\n    if (typeof propsOnMenuOpen === 'function') {\n      propsOnMenuOpen();\n    }\n    setStateMenuIsOpen(true);\n  }, [propsOnMenuOpen]);\n\n  const onMenuClose = useCallback(() => {\n    if (typeof propsOnMenuClose === 'function') {\n      propsOnMenuClose();\n    }\n    setStateMenuIsOpen(false);\n  }, [propsOnMenuClose]);\n\n  const inputValue =\n    propsInputValue !== undefined ? propsInputValue : stateInputValue;\n\n  const menuIsOpen =\n    propsMenuIsOpen !== undefined ? propsMenuIsOpen : stateMenuIsOpen;\n\n  const value = propsValue !== undefined ? propsValue : stateValue;\n\n  return {\n    inputValue,\n    menuIsOpen,\n    onChange,\n    onClear,\n    onInputChange,\n    onMenuClose,\n    onMenuOpen,\n    value,\n  };\n};\n\nuseStateManager.propTypes = {};\n\nexport default useStateManager;\n","export const getOptionByValue = (options, value) =>\n  options.find(option => option.value === value);\n\nexport const clearAccent = str =>\n  str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n","import PropTypes from 'prop-types';\nimport { clearAccent } from '../helpers';\n\nconst useFilter = (options = [], filterText = '', filterOptions) => {\n  let normalizedFilterText = filterText;\n\n  if (!filterOptions.caseSensitive) {\n    normalizedFilterText = filterText.toLowerCase();\n  }\n\n  if (!filterOptions.accentSensitive) {\n    normalizedFilterText = clearAccent(normalizedFilterText);\n  }\n\n  return options.filter(option => {\n    let normalizedLabel = option.label;\n\n    if (!filterOptions.caseSensitive) {\n      normalizedLabel = option.label.toLowerCase();\n    }\n\n    if (!filterOptions.accentSensitive) {\n      normalizedLabel = clearAccent(normalizedLabel);\n    }\n\n    return normalizedLabel.includes(normalizedFilterText);\n  });\n};\n\nuseFilter.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.any,\n      label: PropTypes.string,\n    }),\n  ),\n  filterText: PropTypes.string,\n  filterOptions: PropTypes.shape({\n    caseSensitive: PropTypes.bool,\n    accentSensitive: PropTypes.bool,\n  }),\n};\n\nexport default useFilter;\n","const useAsync = ({ triggerService, service }) => {\n  return {};\n};\n\nexport default useAsync;\n","import PropTypes from 'prop-types';\nimport { Box, Input, InputGroup, InputRightElement } from '@chakra-ui/react';\nimport { CloseIcon, ChevronDownIcon } from '@chakra-ui/icons';\nimport { useClickOutside } from '@naveteam/prometheus';\nimport { useRef } from 'react';\nimport Menu from './Menu';\n\nimport { useOptions, useStateManager, useFilter } from '../hooks';\nimport { getOptionByValue } from '../helpers';\n\nconst Autocomplete = ({\n  /* Label do input */\n  label,\n\n  /* Funcao que, recebendo uma opcao por parametro, retornará a sua label */\n  getOptionLabel,\n\n  /* Funcao que, recebendo uma opcao por parametro, retornará a sua value */\n  getOptionValue,\n\n  /* Opcoes do input em qualquer padrao (as props getOptionLabel e getOptionValue poderao ser usadas para parsear essas opcoes) */\n  options: propsOptions,\n\n  /* Valor externo, usado em componentes controlados */\n  value: externalValue,\n\n  /* Funcao chamada quando alguma opcao for selecionada (ou clear) */\n  onChange,\n\n  /* controlado a forma com que o filtro ocorrerá */\n  filterOptions,\n\n  /* Mensagem de \"options vazias\" */\n  emptyMessage,\n\n  /* Quantidade de itens renderizados \"sem scroll\" */\n  menuSize,\n\n  /* Somente durante o estágio de desenvolvimento */\n  debugMode,\n\n  ...rest\n}) => {\n  const allOptions = useOptions(propsOptions, getOptionLabel, getOptionValue);\n\n  const state = useStateManager({\n    onChange,\n    value: externalValue,\n    defaultInputValue: externalValue\n      ? getOptionByValue(allOptions, externalValue).label\n      : undefined,\n  });\n\n  const options = useFilter(allOptions, state.inputValue, filterOptions);\n\n  // ========================\n  // References\n  // ========================\n  const containerRef = useRef();\n  const menuRef = useRef();\n\n  // ========================\n  // Handlers\n  // ========================\n  const handleInputSearch = event => state.onInputChange(event.target.value);\n\n  const onPickOption = option => {\n    state.onChange(option);\n    state.onMenuClose();\n    return option;\n  };\n\n  // ========================\n  // Listners\n  // ========================\n\n  // Executado no clique fora das opcoes e do input (deve resetar para o valor atual)\n  useClickOutside(() => {\n    // ToDo: Verificar se essa lógica do onClose deve ir para dentro do stateManager\n    const currentOption = getOptionByValue(options, state.value);\n    if (currentOption === undefined) {\n      state.onInputChange('');\n    } else {\n      state.onInputChange(currentOption.label);\n    }\n    return state.onMenuClose();\n  }, containerRef);\n\n  if (debugMode) {\n    console.log(\n      `%cState do autocomplete (${label})`,\n      'color: red; font-family:monospace; font-size: 20px',\n    );\n    console.group('state');\n    console.log(filterOptions);\n    console.log(state);\n    console.log(options);\n    console.group('state');\n  }\n\n  return (\n    <Box ref={containerRef} position=\"relative\" {...rest}>\n      <InputGroup>\n        <Input\n          onChange={handleInputSearch}\n          value={state.inputValue}\n          flex={1}\n          placeholder={label}\n          onClick={state.onMenuOpen}\n        />\n        <InputRightElement>\n          {state.value && (\n            <CloseIcon\n              onClick={state.onClear}\n              cursor=\"pointer\"\n              w=\"10px\"\n              h=\"10px \"\n            />\n          )}\n          <ChevronDownIcon ml=\"10px\" />\n        </InputRightElement>\n      </InputGroup>\n      <Menu\n        options={options}\n        open={state.menuIsOpen}\n        onPickOption={onPickOption}\n        emptyMessage={emptyMessage}\n        size={menuSize}\n        ref={menuRef}\n      />\n    </Box>\n  );\n};\n\nAutocomplete.propTypes = {\n  label: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  getOptionLabel: PropTypes.func,\n  getOptionValue: PropTypes.func,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  filterOptions: PropTypes.shape({\n    caseSensitive: PropTypes.bool,\n    accentSensitive: PropTypes.bool,\n  }),\n  emptyMessage: PropTypes.string,\n  menuSize: PropTypes.number,\n  debugMode: PropTypes.bool,\n};\n\nAutocomplete.defaultProps = {\n  getOptionLabel: option => option.label,\n  getOptionValue: option => option.value,\n  filterOptions: {\n    caseSensitive: false,\n    accentSensitive: false,\n  },\n  emptyMessage: 'No options',\n  menuSize: 5,\n};\n\nexport default Autocomplete;\n","import PropTypes from 'prop-types';\nimport BaseAutocomplete from './Autocomplete';\n\nimport { useAsync } from '../hooks';\n\nconst AsyncAutocomplete = ({ service, triggerService, ...rest }) => {\n  const asyncState = useAsync({ service, triggerService });\n\n  return <BaseAutocomplete {...rest} />;\n};\n\nAsyncAutocomplete.defaultProps = {\n  triggerService: 1,\n};\n\nAsyncAutocomplete.propTypes = {\n  service: PropTypes.func.isRequired,\n  triggerService: PropTypes.number,\n};\n\nexport default AsyncAutocomplete;\n","import { Box, Divider, Checkbox, Text } from '@chakra-ui/react';\nimport { useState } from 'react';\n\nimport { Autocomplete, AsyncAutocomplete } from './Components';\n\nconst mockedOptions = [\n  {\n    label: 'Lorem',\n    value: 1,\n  },\n  {\n    label: 'Ipsum',\n    value: 2,\n  },\n  {\n    label: 'Dólor',\n    value: 3,\n  },\n  {\n    label: 'sit',\n    value: 4,\n  },\n  {\n    label: 'amet',\n    value: 5,\n  },\n  {\n    label: 'Consectetur',\n    value: 6,\n  },\n  {\n    label: 'Adipiscing',\n    value: 7,\n  },\n  {\n    label: 'Elit',\n    value: 8,\n  },\n];\n\n// sit amet, consectetur adipiscing elit\n\nconst App = () => {\n  const [controledValue, setControledValue] = useState(2);\n  const [filterOption, setFilterOptions] = useState({\n    caseSensitive: false,\n    accentSensitive: false,\n  });\n\n  const getOptions = async textFilter => {\n    return fetch(`http://universities.hipolabs.com/search?${textFilter}`);\n  };\n\n  return (\n    <Box\n      flexDirection=\"column\"\n      display=\"flex\"\n      minHeight=\"100vh\"\n      width=\"100vw\"\n      background=\"white\"\n    >\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        height=\"300px\"\n        bgGradient=\"linear(to-r, teal.500,green.500)\"\n        width=\"100vw\"\n        marginBottom=\"16\"\n      >\n        <Text ml=\"42px\" fontWeight=\"black\" fontSize=\"6xl\" tex color=\"white\">\n          💡 Chakra autocomplete\n        </Text>\n      </Box>\n      <Box\n        width=\"50vw\"\n        margin=\"auto\"\n        padding=\"4\"\n        borderRadius=\"2xl\"\n        background=\"white\"\n      >\n        <Text\n          fontWeight=\"black\"\n          color=\"gray.600\"\n          marginBottom=\"4\"\n          fontSize=\"32px\"\n        >\n          Basic\n        </Text>\n        <Autocomplete label=\"Uncontroled\" options={mockedOptions} />\n        <Divider my=\"8\" />\n        <Text>State: {controledValue}</Text>\n        <Autocomplete\n          // debugMode\n          label=\"Controlado\"\n          onChange={setControledValue}\n          value={controledValue}\n          options={mockedOptions}\n        />\n        <Divider my=\"8\" />\n        <Autocomplete\n          debugMode\n          label=\"Filter option control\"\n          options={mockedOptions}\n          filterOptions={filterOption}\n        />\n        <Checkbox\n          isChecked={filterOption.caseSensitive}\n          onChange={e =>\n            setFilterOptions({\n              ...filterOption,\n              caseSensitive: e.target.checked,\n            })\n          }\n        >\n          Case sensitive\n        </Checkbox>\n        <Checkbox\n          isChecked={filterOption.accentSensitive}\n          onChange={e =>\n            setFilterOptions({\n              ...filterOption,\n              accentSensitive: e.target.checked,\n            })\n          }\n        >\n          Accent sensitive\n        </Checkbox>\n        <Divider my=\"8\" />\n        <Autocomplete\n          label=\"Custom empty\"\n          options={mockedOptions}\n          emptyMessage=\"Nenhuma opção encontrada\"\n        />\n        <Divider my=\"8\" />\n        <Autocomplete label=\"Menu size\" options={mockedOptions} menuSize={8} />\n\n        <Divider my=\"24\" />\n\n        <Text\n          fontWeight=\"black\"\n          color=\"gray.600\"\n          marginBottom=\"4\"\n          fontSize=\"32px\"\n        >\n          Async\n        </Text>\n\n        <AsyncAutocomplete\n          label=\"Async example\"\n          service={getOptions}\n          triggerService={3}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}